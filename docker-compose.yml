
services:
  express-app:
    image: express-app:latest # take this image if locally available
    build: . # otherwise build it from Dockerfile in current directory
    ports:
      - "3000" # Map the port that Express is running on
    environment:
      NODE_ENV: development # set node environment to development
      TZ: ${TZ} 
      MONGO_URL: ${MONGO_URL}
      HOST: ${HOST}
    command: npm start # start express app
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb: 
        condition: service_started # run only if the mongodb container has started

  nginx:
    image: nginx:latest # pull nginx image
    ports:
      - "80:80"  # Map port 80 on the host to port 80 inside the NGINX container
      - "443:443" # Map port 443 on the host to port 443 inside the NGINX container
    environment:
      - TZ=${TZ}  # Set the timezone based on the environment variable
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Map your custom nginx.conf to the container
      - ./index.html:/usr/share/nginx/html/index.html # Copy index.html into the container 
      - ./cert:/usr/share/nginx/cert  # Copy all certificate files into the container
      - ./nginx/logs:/var/log/nginx   # Map NGINX logs from the container to the host machine
    depends_on:
      - express-app  # Ensure the NGINX container starts after the Express app is up


  mongodb:
    image: mongo:latest   # Use the latest MongoDB image
    container_name: mongodb   # Set a custom name for the MongoDB container
    environment:
      - TZ=${TZ}   # Set the timezone based on the environment variable
    ports:
      - "27017:27017"  # Map port 27017 on the host to port 27017 in the MongoDB container
    volumes:
      - mongo-data:/data/db # Persist MongoDB data in a named volume to retain data across container restarts

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # RabbitMQ main port (AMQP)
      - "15672:15672"  # RabbitMQ Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user  # Replace with your username
      RABBITMQ_DEFAULT_PASS: password  # Replace with your password
      RABBITMQ_ERLANG_COOKIE: 'some_secret_cookie'  # Used for clustering
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongo-data: # Define a named volume for persisting MongoDB data across container restarts
  rabbitmq_data: 
